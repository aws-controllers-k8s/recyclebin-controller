// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package rule

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/rbin"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/rbin/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/recyclebin-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Rule{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetRuleOutput
	resp, err = rm.sdkapi.GetRule(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetRule", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Identifier != nil {
		ko.Status.Identifier = resp.Identifier
	} else {
		ko.Status.Identifier = nil
	}
	if resp.LockConfiguration != nil {
		f3 := &svcapitypes.LockConfiguration{}
		if resp.LockConfiguration.UnlockDelay != nil {
			f3f0 := &svcapitypes.UnlockDelay{}
			if resp.LockConfiguration.UnlockDelay.UnlockDelayUnit != "" {
				f3f0.UnlockDelayUnit = aws.String(string(resp.LockConfiguration.UnlockDelay.UnlockDelayUnit))
			}
			if resp.LockConfiguration.UnlockDelay.UnlockDelayValue != nil {
				unlockDelayValueCopy := int64(*resp.LockConfiguration.UnlockDelay.UnlockDelayValue)
				f3f0.UnlockDelayValue = &unlockDelayValueCopy
			}
			f3.UnlockDelay = f3f0
		}
		ko.Spec.LockConfiguration = f3
	} else {
		ko.Spec.LockConfiguration = nil
	}
	if resp.LockState != "" {
		ko.Status.LockState = aws.String(string(resp.LockState))
	} else {
		ko.Status.LockState = nil
	}
	if resp.ResourceTags != nil {
		f6 := []*svcapitypes.ResourceTag{}
		for _, f6iter := range resp.ResourceTags {
			f6elem := &svcapitypes.ResourceTag{}
			if f6iter.ResourceTagKey != nil {
				f6elem.ResourceTagKey = f6iter.ResourceTagKey
			}
			if f6iter.ResourceTagValue != nil {
				f6elem.ResourceTagValue = f6iter.ResourceTagValue
			}
			f6 = append(f6, f6elem)
		}
		ko.Spec.ResourceTags = f6
	} else {
		ko.Spec.ResourceTags = nil
	}
	if resp.ResourceType != "" {
		ko.Spec.ResourceType = aws.String(string(resp.ResourceType))
	} else {
		ko.Spec.ResourceType = nil
	}
	if resp.RetentionPeriod != nil {
		f8 := &svcapitypes.RetentionPeriod{}
		if resp.RetentionPeriod.RetentionPeriodUnit != "" {
			f8.RetentionPeriodUnit = aws.String(string(resp.RetentionPeriod.RetentionPeriodUnit))
		}
		if resp.RetentionPeriod.RetentionPeriodValue != nil {
			retentionPeriodValueCopy := int64(*resp.RetentionPeriod.RetentionPeriodValue)
			f8.RetentionPeriodValue = &retentionPeriodValueCopy
		}
		ko.Spec.RetentionPeriod = f8
	} else {
		ko.Spec.RetentionPeriod = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.RuleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.RuleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}

	rm.setStatusDefaults(ko)
	if err := rm.setResourceAdditionalFields(ctx, ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.Identifier == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetRuleInput, error) {
	res := &svcsdk.GetRuleInput{}

	if r.ko.Status.Identifier != nil {
		res.Identifier = r.ko.Status.Identifier
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateRuleOutput
	_ = resp
	resp, err = rm.sdkapi.CreateRule(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateRule", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Identifier != nil {
		ko.Status.Identifier = resp.Identifier
	} else {
		ko.Status.Identifier = nil
	}
	if resp.LockConfiguration != nil {
		f2 := &svcapitypes.LockConfiguration{}
		if resp.LockConfiguration.UnlockDelay != nil {
			f2f0 := &svcapitypes.UnlockDelay{}
			if resp.LockConfiguration.UnlockDelay.UnlockDelayUnit != "" {
				f2f0.UnlockDelayUnit = aws.String(string(resp.LockConfiguration.UnlockDelay.UnlockDelayUnit))
			}
			if resp.LockConfiguration.UnlockDelay.UnlockDelayValue != nil {
				unlockDelayValueCopy := int64(*resp.LockConfiguration.UnlockDelay.UnlockDelayValue)
				f2f0.UnlockDelayValue = &unlockDelayValueCopy
			}
			f2.UnlockDelay = f2f0
		}
		ko.Spec.LockConfiguration = f2
	} else {
		ko.Spec.LockConfiguration = nil
	}
	if resp.LockState != "" {
		ko.Status.LockState = aws.String(string(resp.LockState))
	} else {
		ko.Status.LockState = nil
	}
	if resp.ResourceTags != nil {
		f4 := []*svcapitypes.ResourceTag{}
		for _, f4iter := range resp.ResourceTags {
			f4elem := &svcapitypes.ResourceTag{}
			if f4iter.ResourceTagKey != nil {
				f4elem.ResourceTagKey = f4iter.ResourceTagKey
			}
			if f4iter.ResourceTagValue != nil {
				f4elem.ResourceTagValue = f4iter.ResourceTagValue
			}
			f4 = append(f4, f4elem)
		}
		ko.Spec.ResourceTags = f4
	} else {
		ko.Spec.ResourceTags = nil
	}
	if resp.ResourceType != "" {
		ko.Spec.ResourceType = aws.String(string(resp.ResourceType))
	} else {
		ko.Spec.ResourceType = nil
	}
	if resp.RetentionPeriod != nil {
		f6 := &svcapitypes.RetentionPeriod{}
		if resp.RetentionPeriod.RetentionPeriodUnit != "" {
			f6.RetentionPeriodUnit = aws.String(string(resp.RetentionPeriod.RetentionPeriodUnit))
		}
		if resp.RetentionPeriod.RetentionPeriodValue != nil {
			retentionPeriodValueCopy := int64(*resp.RetentionPeriod.RetentionPeriodValue)
			f6.RetentionPeriodValue = &retentionPeriodValueCopy
		}
		ko.Spec.RetentionPeriod = f6
	} else {
		ko.Spec.RetentionPeriod = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.RuleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.RuleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.Tags != nil {
		f9 := []*svcapitypes.Tag{}
		for _, f9iter := range resp.Tags {
			f9elem := &svcapitypes.Tag{}
			if f9iter.Key != nil {
				f9elem.Key = f9iter.Key
			}
			if f9iter.Value != nil {
				f9elem.Value = f9iter.Value
			}
			f9 = append(f9, f9elem)
		}
		ko.Spec.Tags = f9
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateRuleInput, error) {
	res := &svcsdk.CreateRuleInput{}

	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.LockConfiguration != nil {
		f1 := &svcsdktypes.LockConfiguration{}
		if r.ko.Spec.LockConfiguration.UnlockDelay != nil {
			f1f0 := &svcsdktypes.UnlockDelay{}
			if r.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit != nil {
				f1f0.UnlockDelayUnit = svcsdktypes.UnlockDelayUnit(*r.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit)
			}
			if r.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue != nil {
				unlockDelayValueCopy0 := *r.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue
				if unlockDelayValueCopy0 > math.MaxInt32 || unlockDelayValueCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field UnlockDelayValue is of type int32")
				}
				unlockDelayValueCopy := int32(unlockDelayValueCopy0)
				f1f0.UnlockDelayValue = &unlockDelayValueCopy
			}
			f1.UnlockDelay = f1f0
		}
		res.LockConfiguration = f1
	}
	if r.ko.Spec.ResourceTags != nil {
		f2 := []svcsdktypes.ResourceTag{}
		for _, f2iter := range r.ko.Spec.ResourceTags {
			f2elem := &svcsdktypes.ResourceTag{}
			if f2iter.ResourceTagKey != nil {
				f2elem.ResourceTagKey = f2iter.ResourceTagKey
			}
			if f2iter.ResourceTagValue != nil {
				f2elem.ResourceTagValue = f2iter.ResourceTagValue
			}
			f2 = append(f2, *f2elem)
		}
		res.ResourceTags = f2
	}
	if r.ko.Spec.ResourceType != nil {
		res.ResourceType = svcsdktypes.ResourceType(*r.ko.Spec.ResourceType)
	}
	if r.ko.Spec.RetentionPeriod != nil {
		f4 := &svcsdktypes.RetentionPeriod{}
		if r.ko.Spec.RetentionPeriod.RetentionPeriodUnit != nil {
			f4.RetentionPeriodUnit = svcsdktypes.RetentionPeriodUnit(*r.ko.Spec.RetentionPeriod.RetentionPeriodUnit)
		}
		if r.ko.Spec.RetentionPeriod.RetentionPeriodValue != nil {
			retentionPeriodValueCopy0 := *r.ko.Spec.RetentionPeriod.RetentionPeriodValue
			if retentionPeriodValueCopy0 > math.MaxInt32 || retentionPeriodValueCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field RetentionPeriodValue is of type int32")
			}
			retentionPeriodValueCopy := int32(retentionPeriodValueCopy0)
			f4.RetentionPeriodValue = &retentionPeriodValueCopy
		}
		res.RetentionPeriod = f4
	}
	if r.ko.Spec.Tags != nil {
		f5 := []svcsdktypes.Tag{}
		for _, f5iter := range r.ko.Spec.Tags {
			f5elem := &svcsdktypes.Tag{}
			if f5iter.Key != nil {
				f5elem.Key = f5iter.Key
			}
			if f5iter.Value != nil {
				f5elem.Value = f5iter.Value
			}
			f5 = append(f5, *f5elem)
		}
		res.Tags = f5
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		if err = syncTags(
			ctx,
			rm.sdkapi,
			rm.metrics,
			string(*desired.ko.Status.ACKResourceMetadata.ARN),
			desired.ko.Spec.Tags,
			latest.ko.Spec.Tags,
		); err != nil {
			return nil, err
		}
	}
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateRuleOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateRule(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateRule", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Identifier != nil {
		ko.Status.Identifier = resp.Identifier
	} else {
		ko.Status.Identifier = nil
	}
	if resp.LockState != "" {
		ko.Status.LockState = aws.String(string(resp.LockState))
	} else {
		ko.Status.LockState = nil
	}
	if resp.ResourceTags != nil {
		f5 := []*svcapitypes.ResourceTag{}
		for _, f5iter := range resp.ResourceTags {
			f5elem := &svcapitypes.ResourceTag{}
			if f5iter.ResourceTagKey != nil {
				f5elem.ResourceTagKey = f5iter.ResourceTagKey
			}
			if f5iter.ResourceTagValue != nil {
				f5elem.ResourceTagValue = f5iter.ResourceTagValue
			}
			f5 = append(f5, f5elem)
		}
		ko.Spec.ResourceTags = f5
	} else {
		ko.Spec.ResourceTags = nil
	}
	if resp.ResourceType != "" {
		ko.Spec.ResourceType = aws.String(string(resp.ResourceType))
	} else {
		ko.Spec.ResourceType = nil
	}
	if resp.RetentionPeriod != nil {
		f7 := &svcapitypes.RetentionPeriod{}
		if resp.RetentionPeriod.RetentionPeriodUnit != "" {
			f7.RetentionPeriodUnit = aws.String(string(resp.RetentionPeriod.RetentionPeriodUnit))
		}
		if resp.RetentionPeriod.RetentionPeriodValue != nil {
			retentionPeriodValueCopy := int64(*resp.RetentionPeriod.RetentionPeriodValue)
			f7.RetentionPeriodValue = &retentionPeriodValueCopy
		}
		ko.Spec.RetentionPeriod = f7
	} else {
		ko.Spec.RetentionPeriod = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.RuleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.RuleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateRuleInput, error) {
	res := &svcsdk.UpdateRuleInput{}

	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Status.Identifier != nil {
		res.Identifier = r.ko.Status.Identifier
	}
	if r.ko.Spec.ResourceTags != nil {
		f3 := []svcsdktypes.ResourceTag{}
		for _, f3iter := range r.ko.Spec.ResourceTags {
			f3elem := &svcsdktypes.ResourceTag{}
			if f3iter.ResourceTagKey != nil {
				f3elem.ResourceTagKey = f3iter.ResourceTagKey
			}
			if f3iter.ResourceTagValue != nil {
				f3elem.ResourceTagValue = f3iter.ResourceTagValue
			}
			f3 = append(f3, *f3elem)
		}
		res.ResourceTags = f3
	}
	if r.ko.Spec.ResourceType != nil {
		res.ResourceType = svcsdktypes.ResourceType(*r.ko.Spec.ResourceType)
	}
	if r.ko.Spec.RetentionPeriod != nil {
		f5 := &svcsdktypes.RetentionPeriod{}
		if r.ko.Spec.RetentionPeriod.RetentionPeriodUnit != nil {
			f5.RetentionPeriodUnit = svcsdktypes.RetentionPeriodUnit(*r.ko.Spec.RetentionPeriod.RetentionPeriodUnit)
		}
		if r.ko.Spec.RetentionPeriod.RetentionPeriodValue != nil {
			retentionPeriodValueCopy0 := *r.ko.Spec.RetentionPeriod.RetentionPeriodValue
			if retentionPeriodValueCopy0 > math.MaxInt32 || retentionPeriodValueCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field RetentionPeriodValue is of type int32")
			}
			retentionPeriodValueCopy := int32(retentionPeriodValueCopy0)
			f5.RetentionPeriodValue = &retentionPeriodValueCopy
		}
		res.RetentionPeriod = f5
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteRuleOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteRule(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteRule", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteRuleInput, error) {
	res := &svcsdk.DeleteRuleInput{}

	if r.ko.Status.Identifier != nil {
		res.Identifier = r.ko.Status.Identifier
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Rule,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
