// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package rule

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customPreCompare(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LockConfiguration, b.ko.Spec.LockConfiguration) {
		delta.Add("Spec.LockConfiguration", a.ko.Spec.LockConfiguration, b.ko.Spec.LockConfiguration)
	} else if a.ko.Spec.LockConfiguration != nil && b.ko.Spec.LockConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.LockConfiguration.UnlockDelay, b.ko.Spec.LockConfiguration.UnlockDelay) {
			delta.Add("Spec.LockConfiguration.UnlockDelay", a.ko.Spec.LockConfiguration.UnlockDelay, b.ko.Spec.LockConfiguration.UnlockDelay)
		} else if a.ko.Spec.LockConfiguration.UnlockDelay != nil && b.ko.Spec.LockConfiguration.UnlockDelay != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit, b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit) {
				delta.Add("Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit", a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit, b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit)
			} else if a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit != nil && b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit != nil {
				if *a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit != *b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit {
					delta.Add("Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit", a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit, b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayUnit)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue, b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue) {
				delta.Add("Spec.LockConfiguration.UnlockDelay.UnlockDelayValue", a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue, b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue)
			} else if a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue != nil && b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue != nil {
				if *a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue != *b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue {
					delta.Add("Spec.LockConfiguration.UnlockDelay.UnlockDelayValue", a.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue, b.ko.Spec.LockConfiguration.UnlockDelay.UnlockDelayValue)
				}
			}
		}
	}
	if len(a.ko.Spec.ResourceTags) != len(b.ko.Spec.ResourceTags) {
		delta.Add("Spec.ResourceTags", a.ko.Spec.ResourceTags, b.ko.Spec.ResourceTags)
	} else if len(a.ko.Spec.ResourceTags) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.ResourceTags, b.ko.Spec.ResourceTags) {
			delta.Add("Spec.ResourceTags", a.ko.Spec.ResourceTags, b.ko.Spec.ResourceTags)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResourceType, b.ko.Spec.ResourceType) {
		delta.Add("Spec.ResourceType", a.ko.Spec.ResourceType, b.ko.Spec.ResourceType)
	} else if a.ko.Spec.ResourceType != nil && b.ko.Spec.ResourceType != nil {
		if *a.ko.Spec.ResourceType != *b.ko.Spec.ResourceType {
			delta.Add("Spec.ResourceType", a.ko.Spec.ResourceType, b.ko.Spec.ResourceType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RetentionPeriod, b.ko.Spec.RetentionPeriod) {
		delta.Add("Spec.RetentionPeriod", a.ko.Spec.RetentionPeriod, b.ko.Spec.RetentionPeriod)
	} else if a.ko.Spec.RetentionPeriod != nil && b.ko.Spec.RetentionPeriod != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.RetentionPeriod.RetentionPeriodUnit, b.ko.Spec.RetentionPeriod.RetentionPeriodUnit) {
			delta.Add("Spec.RetentionPeriod.RetentionPeriodUnit", a.ko.Spec.RetentionPeriod.RetentionPeriodUnit, b.ko.Spec.RetentionPeriod.RetentionPeriodUnit)
		} else if a.ko.Spec.RetentionPeriod.RetentionPeriodUnit != nil && b.ko.Spec.RetentionPeriod.RetentionPeriodUnit != nil {
			if *a.ko.Spec.RetentionPeriod.RetentionPeriodUnit != *b.ko.Spec.RetentionPeriod.RetentionPeriodUnit {
				delta.Add("Spec.RetentionPeriod.RetentionPeriodUnit", a.ko.Spec.RetentionPeriod.RetentionPeriodUnit, b.ko.Spec.RetentionPeriod.RetentionPeriodUnit)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RetentionPeriod.RetentionPeriodValue, b.ko.Spec.RetentionPeriod.RetentionPeriodValue) {
			delta.Add("Spec.RetentionPeriod.RetentionPeriodValue", a.ko.Spec.RetentionPeriod.RetentionPeriodValue, b.ko.Spec.RetentionPeriod.RetentionPeriodValue)
		} else if a.ko.Spec.RetentionPeriod.RetentionPeriodValue != nil && b.ko.Spec.RetentionPeriod.RetentionPeriodValue != nil {
			if *a.ko.Spec.RetentionPeriod.RetentionPeriodValue != *b.ko.Spec.RetentionPeriod.RetentionPeriodValue {
				delta.Add("Spec.RetentionPeriod.RetentionPeriodValue", a.ko.Spec.RetentionPeriod.RetentionPeriodValue, b.ko.Spec.RetentionPeriod.RetentionPeriodValue)
			}
		}
	}

	return delta
}
